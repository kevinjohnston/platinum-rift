;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; INPUT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 playerCount
 myid
 zoneCount
 linkCount
loop zoneCount
 zoneId
 platinumSource
loop linkCount ;;tells how zones are connected
 zone1
 zone2

 platinum ;;my current plat
loop zoneCount
 zId ;;zone id
 ownerId ;;current owner of zone or -1
 podsP0
 podsP1
 podsP2
 podsP3



;;strategy types
random -- monte carlo, search win (may be hard to seed choices, opponent won't play randomly)
weighted priorities -- hardcoded weights for wanting to control continents, reducing liberties, maximizing income, minimizing enemy territory, etc
tit for tat -- respond to opponents apparent strategy (erasers to track and follow opponents pods)
opportunist -- acts randomly but tries to identify weak spots in opponents position (i.e. isolated easily trapped pod)
multi-armed-general -- tries different strategies at random and tries to converge on the one that provides this biggest percent lead over the opponent

;;;;;helper code
;;in game
traveling salesman -- move between each platinum node as quickly as possible
advisor -- evaluates postion (i.e. decides if you have high or low income, weak or strong board positions)
rest -- be able to 'rest' board evaluation functions for a number of turns to spend processor time elsewhere

;;out of game
script to combine source code files in a directory for easy copy/paste to browser



;;;;Abstractions
zone-sets -- groups of territories (or single territories)
strategies -- functions that change overview
tactics -- functions that can change zone-sets
advisors -- functions that can evaluate zone-sets


;;simple strategies
go straight for biggest payoff platinum nodes
capture small continents early for secure income
capture and hold chokepoints between continents
penetrate opponents territory in pairs to slow defenses
select areas to cede to an opponent and aggressively target others
maximize territory to surface area
go after less productive platinum square to reduce competition



;;zone-set
{
:id (zone-id or  1000+)
:sub-zones #{ (set of zone-ids)}
:priority (int to indicate how important this territory is to the strategy gets re-evaluated from time to time)
:last-eval (turn priority was last set)
:value (accumulated total of platinum bars in all sub-zones)
:total-liberties (total number of adjacent zones)
:open-liberties (number of adjacent zones that aren't controlled by you)
}


;;strategies
{
  :last-eval (last turn strategy was evaluated)
  :evaluation (num last evaulation of overall strategy by advisor)

}

(fn strat1
 [zone-set ;;the zone set to apply the strat to
 ]
)

;strat-list:
defend (defend sensitive positions)
erase (follow enemy pods around taking old territory)
blitz (run as deep into enemy territory as possible)
greed (take as many valuable resource locations as possible as quickly as possible)
herd (try to force enemies to move to bad positions)
save (stockpile plat)
surge (spend all plat)
cede (decide not to pursue certain zones)






;;misc helper fun
forget-about-it (remove continents that are claimed entirely by me or by other players)
advance-game (adjust whether the game is considered early, mid, or late)



;strategy is about what desired board result will look like in x turns
;tactics are the methods that can be applied to zone-sets to try to achieve a strategy


;;program flow
...hard code turn 1-10 strategy...
then...
pick strategy for each continent (at random at first, then based on past successes of the strat)
assign priorities to each zone based on the strategy
pick tactics recursively for each zone in the continent




;;testing
create world (NA)
pick some strategy (raise income)
assign tactics to each zone (take high plat areas)



strategy -- set of functions to set desired game state
tactic -- function to modify game state


(defn tactic-place-unit-on-res [board-state]
;;find highest value res
;;place unit
;;return new state
)

(defn tactic-move-unit-to-res [board-state]
;;find highest value res
;;find closest unit
;;move unit towards res
;;return new state
)


(loop [iterate-board-state current-state
       acc-tactics []]
(if (empty? (all-available-tactics))
    acc-tactics
(let [choosen-tactic (first (sort evaluate-board-state (all-available-tactics)))]
(recur choosen-tactic-result
    choosen-tactic))))

;;accumlate best available tactics










;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Alt approach ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


agenda -- priorities for game state (player metrics)
personality -- quantifies how to treat metrics (enemies should be avoided,
strategy -- priorities for board state (board metrics)
tactics -- how to achive board state (considered strategy and personality)



(fn was-agenda-successful?
(loop [goals @goals
       success 0] {:goal (fn [player-state] (>= 20 (:platinum player-state))) :priority [0-3] }
   (recur
 (next goals)
(+ success
  (* ((first (first goal)) player-state) priority))))




personality
{
:aggressive 1-10
:frugal 1-10
:defensive 1-10
:daring 1-10 (don't avoid enemy territory)
}


strategy
{
:maximize-territory 1-10
:get-plat 1-10
:minimize-liberties 1-10
:exploit-weakness
}

(defprotocal tactics
(filter-map [personality, strategy] "Function to adjust graph-map, removing occupied or near occupied territory")

)





ultimately all decisions boil down to moving things or placing things (or neither)





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Heat approach ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
create 'advisors' each evaluating a zone's importance (tactician, banker, defender, ...)
advisors weights for each node sum or multiply to create a heat map
iterate over available actions such as placing new pods or moving units and review which results in biggest gain, apply and eval next action


advisors should use agents to assign priorities to each zone,
advisors evaluation function should take a function to determine how to weight results
higher priority zones should have a lower value for easy sorting


error function to evaluate position (need some absolute)
what is optimal
;;higher stats than opponent
;;most gain among advisors

;;strategy effectiveness is running average of (* strategy-weight relative improvement of board position compared to opponent)




(advise advisor @global-map) ;;returns vector of vectors, one for each game node giving a priority to the nodes [[:node-id :priority-num] [...]...]
(sum-advice)
(while has-more-actions
    (do-best (sort compare (move-nearest :highest-priority-node) (place-near :highest-priority-node))))
(evalutate-game-state-better-worse-and-adjust-advisor-influence)


;;;;;;;;;;;;;;;;;;;; FILES ;;;;;;;;;;;;;;;;;;;;
;;;;;clojure files
world.clj -- encapsulates the game world, provides some functions to evaluate it
advisors.clj -- encapulates tactical board evaluation
player.clj -- used to represent a player within the game handles much of the higher level decision logic and how to turn that into outpu
core.clj -- used to test the application and mimic the game world
graph.clj -- contains the graph implementation used by player,advisors to find shortest paths and evaluate the game board




;;;;TODO

create method for adusting advisor influence
create additional advisors
create constants for advisor initial influence (?and how much to adjust influence?)


;;;;DONE
#remove all direct references to mutable world from other files (except core.clj)
#fill out skeleton of main method
#fill out edge vector
#create method to evaluate board and return seq of moves
#create method to evaluate board and return seq of placements
#working heat map of world
#able to assign a value to each node via an advisor ;;create a priority-source field
#able to adjust a node and nearby nodes based on some function ;;create a scalar field
#able to make a point source and scalar adjustment (w/o side effects) to a map for quick comparison
#create method to accurately distribute income to map nodes

how to use advisor influence (weights source adjustment at node)
how to adjust advisor influence
 get delta for each player


data points


turn


priority-source field
scalar-field



treat each advisor as assigning a temperature source to each node in the world.
model how that temperature source affects surrounding territories
apply temp effect to each territory


summing functions
distance between any two points can be given by seach function

scalar field -- use advisor to assign scalar value to each point
sort world by distance from point
vector field -- use equation to model how a fields scalar value affects priority for itself and surrounding values



;;;;DATA STRUCTURES
;;player -- used to quantify how well a player is doing
{
:income
:territories
:liberties
:resources
}

;;world
{
:id zone-id 0-154
:source-value ;;reset at beginning of every turn
:scalar-value ;;recalculated from nearby source values every turn
:owner ;;id of player controlling this
:open-liberties ;;number of touching nodes owners by non-neutral enemy player
:total-liberties ;;number of bordering nodes, never reset
:income ;;plat income of node each turn, never reset
}



;;;;EQUATIONS
gradient descent
error-calc for gradient descent
importance of individual advisors as a function of time
player evaluation




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Monte Carlo approach ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
after first turn of placing pods on ten highest income sites (or some randomly amongst income sites)
try to play as many games as possible and determine which moves are most likely to result in success, make random moves (possibly weighted towards moving to income squares), model opponent as always moving towards highest empty resource square























;;;;;;;;;;;;;;;;;;;; Game loop ;;;;;;;;;;;;;;;;;;;;
;;before
create official players
create official world


;;;;;ai portion
;;setup
create partial functions for run-player function
enqueue variables for read function
start player timer
;;main


;;after all ai
run turn phases
recur if remaining turns




;;functions
setup -- handles initial writing to a given read-q
run-player -- handles running and pausing a player ai
ai -- a players ai logic
;;symbols







;;problem
game expects code to exist in a while true loop
ai code needs to be started and stopped -- managed externally
need to be able to start and stop each ai together and only after the queues for the next turn are ready
need to only enqueue the next turns information after each ai has had time to come up with orders

;;solution -- thread passing
threads are run and suspended by run-player functions and resulting paused thread is returned
every turn run-player is passed new thread to resume and pause again

;;problem-b
the thread managed by run-player needs special first turn setup and additional setup at the beginning of every turn therafter

;;solution -- setup function passing
make run-player take a setup function that performs the setup process, this will be specially created at beginning of game
  and remade in recur function for the game loop





run-player signature
(turn-time info-q ai-thread player-id setup) -> (ai-thread)

setup-signature (defined)








;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Completed feature ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
point update movement, make the det-move method update the world after each move before recomputing the local min around the next pod

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; New feature ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
evaluate change in player strength and adjust advisor influence at the end of every turn
use minimax to determing starting pod placement
fade confidence in advisor strength adjustments every turn
forget about continents completely conquered by any non neutral player






multi-armed advisors
;;need to have some means of updating advisor weight (influence adv adjust)
;;need some notion of continents, or segements of graph
;;need to evaluate players at the end of every turn
;;need to get changes in player evaluations over time
;;need exponentialweighting function to
;;need to map player evaulations (or change of them) to 'payoffs' to the bandit
;;need to express confidence of bandit results to a range of values
;;need to express confidence of bandit results as a function of turns elapsed since then






;;the more strongly a bandit is weighted (as a fraction of total weighting) the more confident i can be that giving it that weight again will result in the same outcome


;;bandit weight, turn-num





confidence as a function of influence, turn
c(i, t) =

each previous data point is a node


table of sample previous points

turn | inf | conf
 1     .2     .2
 2     .4     .4


(/ .4 (- 3 2))
(/ .2 (- 3 1))


(+
(* (Math/pow 0.1 2) (- 3 1))
(* (Math/pow 0.1 2) (- 3 2)))

(+
(* (Math/pow 10 2) (- 3 1))
(* (Math/pow 10 2) (- 3 2)))


(Math/pow 0.1 2)


table data-structure
[turn inf conf]






confidence would need to be tracked for each advisor
gradient descent for confidence


monte carlo volume


taking confidence to n points in a range and averaging them will tend towards area




;;what need to happen regardless of search code
divide world into continents,
have different weights for different continents


evaluate different choices of actions
be able to apply


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
player state for a continent is evaulated and fit to a map format
e.g. {:pod-str :high
      :territory :low
      :income :high}

this is looked up in a map of the form
k: { eval map as above }
v: [ vector of advisor strength vectors }

and the resulting advisor strenght vector, for that map is returned



how are continents evaluated

what is contained in returned vector
[ [0]
  [1]
  [1 2]
  [sight scale-radius] ]




;;parts to dispatch
determine raw number
call dispatch with type and number


instead of returning :low, :med, :high return a vector of [lowness, medness, highness]



ultimately an evaluation will be a map of k=property v=fuzzy-set pairs
{ --contains information for each property
:territory [0.2 0.8 0 0 0 0] --inner vectors are a fuzzy set of :vlo -:max classifications for the given property
[]
[]
}

expert rules are defined in terms of fuzzy sets
i.e. (if :territory is :low and :income is :high ) return adv vector [1 2 0.3 17 6]
then :be-aggressive


how to turn strategies into adv vectors

the evaluation will be run through each expert rule and given a truth value
{
 ;;key=expert rule ;;true value
   :expert-rule1      0.7
}

the number rules with total truth values above .9 will be averaged (weighted by truth) and divided by (Math/abs (1 - truth-total)) to come up with adv vector


[1 2 17 0.2 5]  .5
[1 2 4 0.2 5]  .3
[6 3 17 0.2 5]  .4

:be-aggressive .5
:be-passive .3


membership functions
(fn [val] (cond (< val 0.3) [1 0 0]
                (< val 0.5) [(1 - val) val 0]
                (< val 0.7) [0 (1 - val) val]
                (<= val 1.0) [0 0 1]))
.2-> [1 0 0]
.3-> [.7 .3 0]
.4-> [.6 .4 0]
.5-> [0 .5 .5]
.6-> [0 .4 .6]
.7-> [0 .3 .7]
.8-> [0 0 1]



inferences:

rules:
premise -> (if :terr is :low)  consequent -> (then :aggressiveness is high)


steps
fuzzification: apply membership function to input variable, to get fuzzy set for that input variable
inference: determine truth value for premise of each rule, apply this to the consequent of each rule
composition: fuzzy sets of output variables are combined together/selected
defuzzification(optional): turns a fuzzy set back into a 'crisp' value




**two inference methods
*min:
*product: output is scaled by truthiness of input, so if aggressive corresponds to [0 0 truthiness of premise]


**two conposition methods:
*max: uses the most true consequent relevant to the output variable, for each member of the outputs fuzzy set
*sum: all consequents have their fuzzy subsets added together, this can result in values greater than one and requires defuzz

**many defuzzification methods
*centroid: center of gravity of fuzzy set is computed, that value
*maximum: most true fuzzy category of output variable is used


so given :terr value of .4
after fuzzification results in fuzzy set of
low med high
[.6 .4 0]
for :terr

after inference (product)
rule1 would give fuzzy set
[0 0 .6]
for :aggressiveness

after composition (sum) gives
[0 0 .6]
for :aggressiveness

after defuzzification (maximum)
would use .6 for aggressiveness

defining defuzzification function
(use scaled truth of each category as multiplier of representative value)
[0 0 .6] * [1 5 10] =

normalize truth vector, take dot product with defuz vector



membership functions    (used to map input values to fuzzy sets --- the fuzzification process)
rules                   (used to map input fuzzy sets to output fuzzy sets)
defuz-rules             (used to map composed fuzzy set to 'crisp' value)
inference function --- single func that sends certain fuzzy input sets
to certain rules and keeps map of results
composition function   --- single func that sums output fuzzy sets
defuzzification        --- single func that maps composed fuzzy sets to their defuz-rule and returns the result


rule = [premise consequen]

:premise
({:var :low
:var2 :med
:var3 :low}

:consequent
{:out-var1 :low
:out-var2 :max}


cond (some value of input var) [fuzzy set]



def-protocol for fuzzy-inputs

def-protocol for rules

def protocol for fuzzy-outputs

(defuz-it
[0.2 0.8]



{fuzz-output-key [fuzzy vect]}



;;priorities
#add in continent and fuzzy logic to combined.clj and test
create way of evaluating a continent
add fuzzy logic rules and tweak numbers
adjust how placement is done to exclude continents


;;how to evaluate the world


how to evaluate a map	:very-low	:low	:medium	:high	:very-high	:max
number of friendly pods
number of enemy pods
ratio of friendly to enemy pods	< .2	< 0.5	> .8 && < 1.2	< 1.5	< 2.0	 > 2
pod density
total income	< 3	< 10	< 30	< 60	< 90	> 90
income percent of map total	< 3/120	< 10/120	< ¼	< ½	< ¾	> ¾
friendly/enemy territory total	< 2/10	< 8/10	< 1.5	< 3	< 1000	> 1000
friendly/neutral territory total
friendly territories on continent
total territories
continent territories to world territories ratio	< 1/10	< ¼	< 3/8	< ½	< 1	1
Open-liberties
turn	< 3	< 10	< 30	< 60	< 100	> 100



;;vector of maps, each map contains the evaluation for a single continent
[{
friendly-pods
enemy-pods
ratio-fe-pods
pod-density?
total-income
income-frac
friendly-terr

 } {}...]


ratio
percent
total

territory
income

enemy
friendly
neutral








;;;;;;;;;;;;;;;;;;;;expert rules
;;try to let opponents kill each other if possible
in 3 or 4 player games avoid, enemy units and territory
;;large, rich continents are a prime target
if a cont has a lot of resources weigh the whole continent higher
#;;avoid taking small continents
#if a cont has few territories way it less
#;;don't lose grasp of asia, or other large continents
#if a cont has many territories and we have almost no units there weigh it strongly
;;go where other players aren't
if a cont has few enemies (total) weigh it more strongly
;;once a cont is almost won finish off units quickly
if a cont has few enemy territories left and many friendly territories weigh enemy territory strongly and weigh units strongly
;;avoid placeing units on already conquered territories
if most territories on a continent are friendly weigh friendly territories very negatively
;;punish spread out players
if enemy open-liberties is high, weigh enemy territory more strongly
